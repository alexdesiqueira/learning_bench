#lang sicp

; Exercise 1.9: Each of the following two procedures defines
; a method for adding two positive integers in terms of the
; procedures inc, which increments its argument by 1, and
; dec, which decrements its argument by 1.
;
;    (define (+ a b)
;      (if (= a 0) b (inc (+ (dec a) b))))
;
;    (define (+ a b)
;      (if (= a 0) b (+ (dec a) (inc b))))
;
; Using the substitution model, illustrate the process
; generated by each procedure in evaluating (+ 4 5). Are
; these processes iterative or recursive?

;; For the first procedure, we have:
;;
;; (+ 4 5)  ; a = 4, different than zero
;; (inc (+ (dec 4) 5))
;; (inc (+ 3 5))  ; a = 3, different than zero
;; (inc (inc (+ (dec 3) 5)))
;; (inc (inc (+ 2 5)))  ; a = 2, different than zero
;; (inc (inc (inc (+ (dec 2) 5))))
;; (inc (inc (inc (+ 1 5))))  ; a = 1
;; (inc (inc (inc (inc (+ (dec 1) 5)))))
;; (inc (inc (inc (inc (+ 0 5)))))  ; a = 0, + returns b = 5
;; (inc (inc (inc (inc 5))))
;; (inc (inc (inc 6)))
;; (inc (inc 7))
;; (inc 8)  ; returns 9
;;
;; This procedure is recursive. The next result is dependent
;; from previous results, since + keeps being nested in the
;; next expression. If we stop the process, we will need to
;; start over.
;;
;; Let's check the second procedure.
;;
;; (+ 4 5)  ; a = 4, different than zero
;; (+ (dec 4) (inc 5))
;; (+ 3 6)  ; a = 3, different than zero
;; (+ (dec 3) (inc 6))
;; (+ 2 7)  ; a = 2
;; (+ (dec 2) (inc 7))
;; (+ 1 8)  ; a = 1
;; (+ (dec 1) (inc 8))
;; (+ 0 9)  ; a = 0, + returns b = 9
;;
;; This procedure is iterative. It is not dependent from
;; previous results; if we stop the process in line 45,
;; we can continue the process just entering the values
;; we had so far.
